openapi: 3.0.0
info:
  title: Cinema Catalog Service
  description: >-
    - we need a city for displaying the available cinemas.

    - we need the cinemas to display the movie premieres.

    - we need the movie premieres and display the schedules.

    - we need the schedules to see if there are seats available for booking.
  version: '1.0'

paths:
  /cinemas:
    get:
      x-swagger-router-controller: cinemasRoute
      operationId: getCinemasByCity
      tags:
        - /cinemas
      description: >-
        we already have the location defined to display the cinemas
      responses:
        '200':
          description: Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cinemas'
        default:
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSummary'
  /cinemas/{cinema_id}:
    get:
      x-swagger-router-controller: cinemasRoute
      operationId: getCinemaById
      tags:
        - /cinemas
      description: >-
        we have selected the cinema to display the movie premieres
      parameters:
        - name: cinema_id
          in: path
          description: id of a cinema
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CinemaPremieres'
        default:
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSummary'
  /cinemas/{cinema_id}/{movie_id}:
    get:
      x-swagger-router-controller: cinemasRoute
      operationId: getCinemaScheduleByMovie
      tags:
        - /cinemas
      description: >-
        we have selceted a movie to display the schedules
      parameters:
        - name: cinema_id
          in: path
          description: id of a cinema
          required: true
          schema:
            type: integer
        - name: movie_id
          in: path
          description: id of a movie
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CinemaMovieSchedules'
        default:
          description: Invalid request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorSummary'
servers:
  - url: '/api'
components:
  schemas:
    ErrorSummary:
      properties:
        message:
          type: string
        error:
          $ref: '#/components/schemas/Errors'
      required:
        - message
    Errors:
      type: array
      items:
        $ref: '#/components/schemas/ErrorDetail'
    ErrorDetail:
      type: object
      properties:
        code:
          type: string
        params:
          type: string
        message:
          type: string
        path:
          type: string
    Cinemas:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/CinemaData'
      required:
        - data
    CinemaData:
      type: object
      properties:
        type:
          type: string
          example: "cinemas" # always cinemas
        id:
          type: string
          example: "588ac3a02d029a6d15d0b5c4"
        attributes:
          $ref: '#/components/schemas/CinemaAttributes'
      required:
        - type
        - id
        - attributes
    CinemaAttributes:
      type: object
      properties:
        name:
          type: string
          example: "Plaza Morelia"
      required:
        - name
    CinemaPremieres:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/CinemaPremiereData'
        include:
          type: array
          items:
              $ref: '#/components/schemas/Movie'
      required:
        - data
    CinemaPremiereData:
      type: object
      properties:
        type:
          type: string
          example: "cinemas" # always cinemas
        id:
          type: string
          example: "588ac3a02d029a6d15d0b5c4"
        attributes:
          $ref: '#/components/schemas/CinemaAttributes'
        relationships:
          type: object
          properties:
            movies:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/MovieRelationship'
      required:
        - type
        - id
        - attributes
        - relationships
    CinemaMovieSchedules:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/CinemaMovieScheduleData'
        includes:
          type: array
          items:
            anyOf:
              - $ref: '#/components/schemas/Movie'
              - $ref: '#/components/schemas/Room'
      required:
        - data
        - includes
    CinemaMovieScheduleData:
      type: object
      properties:
        type:
          type: string
          example: "cinemas" # always cinemas
        id:
          type: string
          example: "588ac3a02d029a6d15d0b5c4"
        attributes:
          $ref: '#/components/schemas/CinemaAttributes'
        relationships:
          type: object
          properties:
            movies:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/MovieRelationship'
            rooms:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: '#/components/schemas/RoomRelationship'
      required:
        - type
        - id
        - attributes
        - relationships
    Movie:
      type: object
      properties:
        type:
          type: string
          example: "movies" # always movies
        id:
          type: string
          example: "1"
        attributes:
          $ref: '#/components/schemas/MovieAttributes'
      required:
        - type
        - id
        - attributes
    MovieAttributes:
      type: object
      properties:
        title:
          type: string
          example: "Assasins Creed"
        runtime:
          type: number
          example: 115
        format:
          type: string
          example: "IMAX"
        plot:
          type: string
          example: "Lorem ipsum dolor sit amet"
        released-at:
          type: string
          format: date-time
          example: '2018-12-01T00:00:00Z'
      required:
        - title
        - runtime
        - released-at
    MovieRelationship:
      type: object
      properties:
        type:
          type: string
          example: "movies" # always movies
        id:
          type: string
          example: "1"
      required:
        - type
        - id
    Room:
      type: object
      properties:
        type:
          type: string
          example: "rooms" # always schedules
        id:
          type: string
          example: "588ac3a02d029a6d15d0b5c4"
        attributes:
          $ref: '#/components/schemas/RoomAttributes'
      required:
        - type
        - id
        - attributes
    RoomAttributes:
      type: object
      properties:
        name:
          type: string
          example: "2.0"
        capacity:
          type: number
          example: 100
        schedules:
          type: array
          items:
            $ref: '#/components/schemas/Schedule'
      required:
        - name
        - schedules
    RoomRelationship:
      type: object
      properties:
        type:
          type: string
          example: "rooms" # always rooms
        id:
          type: string
          example: "688ac3a02d029a6d15d0b5c7"
      required:
        - type
        - id
    Schedule:
      type: object
      properties:
        time:
          type: string
          example: "10:15"
        price:
          type: number
          example: 90
      required:
        - time
